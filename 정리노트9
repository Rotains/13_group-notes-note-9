우리는 지금까지 비주얼 스튜디오에 데이터를 입출력하기만 했잖아 파일에는 데이터 입출력을 하지 못해?
그러게 한 번 고민해보자!
C언어는 파일 입출력 함수를 표준 라이브러리 함술 제공하기 때문에 가능하지 않을까??
그럼 한 번 직접 코딩 해보자!!

중요한 것이 있어! 파일 포인트를 알고 가자!
그게 뭔데??
FILE은 파일 관련 작업을 위해 시스템 라이브러리에 만들어진 구조체야! 
이 구조체에는 파일명과 파일의 크기, 파일의 끝 등 파일 관련 정보를 포함하여 있기 때문에 파일 포인터(FILE*)로 작업을 처리해야해.

파일을 여는 방법!

FILE *fp;
fp = fopen("input.txt", "r");

파일에 데이터를 입출력하려면 파일을 반드시 열어야 겠지?
이때 우리는 fopen()함수를 이용하고, fopen()함수는 인자 2개를 받아.
왜 인자를 두 개나 받아?
인자1은 파일명으로 경로를 포함하고 인자2는 파일모드를 나타내서 쓰기나 읽기를 결정하는 거지

여기서 FILE 포인터는 파일의 시작부분이나 마지막 부분을 가리키는데, 추가로 쓰는 경우를 제외하고는 보통 파일의 시작 위치를 가르켜
그런데 파일이 제대로 열리지 않아서 Null이 저장되었는데 이게 값이야?
아니 Null은 아무 값도 가지고 있지 않아 숫자 0하고는 달라 숫자 0은 0이라는 값이 있는 거야.

파일을 닫는 방법!

FILE *fp;
⋮
fclose(fp);

파일을 열고 작업을 마쳤으면 파일을 닫아야 겠지? 만약 파일을 닫지 않고 종료하면 출력 파일의 일부분이 손상되어서 저장이 안될 수 가 있어
그래서 파일을 닫을 때는 fclose()함수를 사용하면 돼. fclose()함수는 닫으려는 파일의 FILE 포인터를 인자로 사용한 것도 기억해!

그러면 파일에서 데이터를 문자 하나 단위로 FILE 포인터가 가리키는 위치에서부터 읽거나 쓰려면 어떡해야해?
그럴 때는 fgetc()와 fputc() 함수를 사용하면 돼 // 문자 입출력
그게 뭔데?
fgetc() 함수는 파일에서 문자 하나를 읽어오고, fputs() 함수는 파일에 문자 하나를 기록하지.

문자를 파일에 출력해보자

#include <stdio.h>
#include <stdlib.h>
 
int main(void)
{
 FILE* fp;
 char ch;

 if((fp = fopen("basic.txt", "w")) == NULL)
 {
 printf("파일이 열리지 않습니다.\n");
 exit(1);
 }

 printf("문자 하나를 입력하세요.\n");
 ch = getchar( );

 while(ch != 'q')
 {
 fputc(ch, fp);
 ch = getchar( );
 }

 printf("파일 입력이 종료되었습니다.\n");
 return 0;
 }

해당 파일을 윈도우에서 열어봤더니 파일 내용이 프로그램의 실행대로 나왔어!
파일을 종료할때는 q를 입력하니 종료되고 이런식으로 입력할 수 있구나!
그리고 종료조건으로 q가 아니고 다른문자를 넣어도 돼 q가 필수가 아니야.

좀 더 깊게 들어가서 행 단위로 데이터를 읽거나 쓰려면 무슨 함수써야할까?
fgets(), fputs() 함수가 있지 // 행 입출력
fgets() 함수는 파일에서 한 행을 읽어와서 문자열 배열에 저장하고, fputs() 함수는 문자열 배열의 내용을 파일에 한행으로 기록하지.
한 행의 기준이 뭐야 그러면?
한 행이란 키보드의 엔터나 \n를 만나기 전까지를 기준이야
fgets(), fputs(),fgetc(),fputc()함수 모두 텍스트 파일이네 그러면?
맞아, 텍스트 파일에 사용되는 함수로 파일의 모든 내용을 문자로 받아들이지 그러면 무엇일까?
읽고 쓰는 내용의 자료형이 모두 char형이라는거네!!

#include <stdio.h>
#include <stdlib.h>
#define LINE 30

int main(void)
{
 FILE* fp1, *fp2;
 char line[LINE];

 fp1 = fopen("lineInput.txt", "r");

 if(fp1 = = NULL)
 { 
printf("파일을 열 수 없습니다.\n");
 exit(1);
 }

 fp2 = fopen("linetarget.txt", "w");

 while(fgets(line, LINE, fp1) != NULL)
 fputs(line, fp2);

fclose(fp1);
fclose(fp2);

return 0;
}

lineInput.txt 파일에 있는 내용을 그대로 읽어서 배열에 저장하고, 저장된 내용을 linetarget.txt 파일에 기록 되는구나
결론은 읽어야 하는 파일 기록되 파일 모두 같은 글자가 나타나네!!
주의할 점도 있어 lineInput.txt 파일이 먼저 존재해야 에러 메세지가 안떠
그래서 우리는 메모장에 먼저 값을 주고 프로젝트 디렉터리에 lineInput.txt 저장후 코딩해야하는거지!
그러면 자동으로 linetarget.txt 파일이 완성되는거지

우리가 텍스트 모드로 데이터를 입출력할때 문자형을 제외한 다른 자료형은 어떻게 되는거야?
문자형을 제외한 다른 자료형은 내부 표현 방식인 텍스트로 변환하는 과정이 필요하지, 변환 작업이 많으면 처리속도에 영향도 생기고 문자형이외는 알 수없는 글자로 바뀌어
그럼 어떡해???
이진 모드라는 것이 있지. 이진 모드로 데이터를 읽고 쓰면 텍스트로 변환하는 과정이 필요없어서 처리속도도 빨라.
이진모드를 사용하려면 어떻게 해야해?
fread()와 fwrite()함수를 사용해주면 돼. 이진 모드로 데이터를 입출력하려면 fopen()함수를 사용할때 파일을 이진 모드로 열어주면 돼! // 블록 입출력
fwirte() 함수는 자료형을 그대로 유지하면서 데이터를 저장하기 때문에 문자형이 아니면 텍스트 문서 편집기로 열었을 때 원래 기록한 내용을 볼 수 없으니까 놀라지마!

fgets()나 fputs()하고 좀 다르구나
그치 뭐가 다른 거 같애?
fread()와 fwrite() 함수는 함수 내부에서 지정한 크기(자료형의 바이트 크기 x 블록 수)만큼 줄 바꿈과 관계없이 데이터를 입출력하거든

printf()와 scanf() 함수와 비슷한 fprint()와 fscanf()를 사용하던데 뭔 차이야? // 파일 입출력 함수
사용법은 둘이 비슷하지 근데 다른 점이 있어
printf(), scannf() 함수는 도스창에 데이터를 입출력하지만 fprintf(), fscanf() 함수는 파일에 데이터를 기록하거나 읽어서 프로그램의 변수에 저장해.
이 함수들을 사용할때 읽어오는 자료가 어떤 자료형인지 알아야 해
맞아 자료형을 잘못 작성하니 원하는 정보를 얻지 못하더라고 문자를 읽어와야하는데 정수형 변환 기호를 사용해버리니까 내가 원하는 문자가 아닌 숫자로 읽어오더라고.

파일에 임의 접근하는 함수에는 fseek(), fsetpos(), fgtpos() 등이 있다.
fseek() 함수는 파일에서 특정 위치를 찾을때 사용한다. 파일 위치 지시자가 원래 있었던 지점에서 사용자가 원하는 간격만큼 파일 위치 지시자를 이동시킬 수 있지만 대신 이진 모드 파일에서만 위치를 제대로 찾아갈 수 있다는 점이다.
fsetpos() 함수는 파일에서 특정 위치를 정할때 사용한다
fgetpos() 함수는 FILE 포인터가 가리키는 위치를 얻을 때 사용한다.

fgetpos()와 fsetpos() 함수를 이용한 예제다.
#include <stdio.h>
#include <string.h>
#include <stdlib.h>

int main(void)
{
FILE* fp;
fpos_t pos; // fpos_t : 파일 위치 자료형으로 long을 재정의한 것
char str[20];
if((fp = fopen("example.c", "rb")) = = NULL)
{
printf("파일이 열리지 않습니다.\n");
exit(1);
}
 fgetpos(fp, &pos); // fgetpos() 함수로 파일 위치 지시자의 위치를 읽고 그 결과 값을 pos에 저장한 후 결과 화면에 출력
 printf("pos = %ld\n", (long)pos);

 fread(str, sizeof(char), 20, fp); // fread() 함수로 20바이트만큼 문자를 읽어 str에 저장한다.

 fgetpos(fp, &pos); // fstpos() 함수로 파일 위치 지시자를 다시 pos에 저장한다.

 printf("pos = %ld, str = %s\n", (long)pos, str);

 pos = 300; // FILE 포인터의 위치를 fsetpos() 함수로 바꾸기 위해서 pos = 300으로 pos에 300을 할당시켜준다.

 if(fsetpos(fp, &pos) != 0) // fsetpos() 함수가 정상적으로 실행되면 0을 반환하는 것을 이용해서 동작을 확인한다.
 printf("fsetpos 에러 발생\n");

 fread(str, sizeof(char), 20, fp); // fread() 함수로 20바이트만큼 str에 읽어온다. 
 fgetpos(fp, &pos); // fgetpos() 함수로 파일 위치 지시자 값을 얻어온다.

 printf("pos = %ld, str = %.30s\n", (long)pos, str); // 도스 창에 파일 위치 지시자와 읽어온 문자열을 출력한다.

 fclose(fp);
 return 0;
}

매크로 함수
#include <stdio.h>
#define PI 3.14 // 매크로를 정의하는 문장에는 전처리 지시자 #을 사용하기 때문에 세미콜론을 사용X
#define AREA(X) (PI * (X) * (X)) // 매크로 함수명 바로 뒤 괄호 이용

int main(void)
 {
 float R;

 printf("원의 반지름을 입력하세요 : ");
 scanf("%f", &R);

 printf("원의 면적은 %.2f입니다.\n", AREA(R));

return 0;
}

매크로 함수명은 다음에 바로 괄호를 입력해줘야해?
매크로 함수명과 괄호 사이에 공백이 있으면 매개변수를 가진 매크로 함수가 아닌 매크로 상수로 인식하기 때문에 반드시 다음에 괄호를 입력해주자 
그렇구나 간단하고 반복적인 내용을 매크로 함수로 처리하면 쉽고 간편하게 프로그램을 작성할 수 있겠네 앞으로!

연습문제 12-3
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>

int main()
{
	FILE* fp = fopen("basic.txt", "w");
	for (int i = 1; i <= 100; i++) {
		int s = 0;
		for (int j = 1; j <= i; j++) {
			s += j;
		}
		fprintf(fp, "%d %d %d\n", 1, i, s);
	}
	fclose(fp);
	return 0;
}

윈도우에서 basic.txt 파일을 열면 1부터 100까지 누적해서 더해 나가는 프로그램이 작성 되어있다.
